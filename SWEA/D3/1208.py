'''
Flatten

한 쪽 벽면에 다음과 같이 노란색 상자들이 쌓여 있다.
높은 곳의 상자를 낮은 곳에 옮기는 방식으로 최고점과 최저점의 간격을 줄이는 작업을 평탄화라고 한다.
평탄화를 모두 수행하고 나면, 가장 높은 곳과 가장 낮은 곳의 차이가 최대 1 이내가 된다.
평탄화 작업을 위해서 상자를 옮기는 작업 횟수에 제한이 걸려있을 때, 제한된 횟수만큼 옮기는 작업을 한 후 최고점과 최저점의 차이를 반환하는 프로그램을 작성하시오.

덤프 : 가장 높은곳 상자를 가장 낮은곳으로 옮기는 것

'''
#주어진 덤프 횟수 이내에 평탄화 완료시, 그 떄의 높이차 반환 (data에 따라서 0or 1)
#가로 길이 100
#모든 위치 상자 높이 1~100
#덤프 횟수는 1이상 1000이하

#전체에서 가장 높은 것을 고른다 (인덱스 빠른 순서) - > 해당 높이 -1
#전체에서 가장 낮은 부분에 옮긴다 -> 해당 높이 + 1


for tc in range(1, 11):

    N = int(input()) #덤프 횟수
    boxs = list(map(int, input().split())) #상자 높이 입력
    boxs.sort()

    for _ in range(N):
        if boxs[0] > boxs[1]:
            boxs.sort()
        if boxs[0] == boxs[99]:
            break
        if boxs[99] == boxs[98]:
            if boxs[0] == (boxs[99] - 1):
                break
        boxs[0] += 1
        boxs[99] -= 1

    diff = max(boxs) - min(boxs)
    print(f"#{tc}", max(boxs) - min(boxs))
