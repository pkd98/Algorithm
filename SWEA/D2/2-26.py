'''
백만 장자 프로젝트

사재기 한번에 많은 양 못함
다음과 같은 조건 하에서 사재기를 하여 최대한의 이득을 얻도록 도와주자.

    1. 원재는 연속된 N일 동안의 물건의 매매가를 예측하여 알고 있다.
    2. 당국의 감시망에 걸리지 않기 위해 하루에 최대 1만큼 구입할 수 있다.
    3. 판매는 얼마든지 할 수 있다.

예를 들어 3일 동안의 매매가가 1, 2, 3 이라면 처음 두 날에 원료를 구매하여 마지막 날에 팔면 3의 이익을 얻을 수 있다.


첫 번째 줄에 테스트 케이스의 수 T가 주어진다.
각 테스트 케이스 별로 첫 줄에는 자연수 N(2 ≤ N ≤ 1,000,000)이 주어지고,
둘째 줄에는 각 날의 매매가를 나타내는 N개의 자연수들이 공백으로 구분되어 순서대로 주어진다.
각 날의 매매가는 10,000이하이다.

최대 이익 출력하라.
'''
#최대이익 : 제일 쌀 때 사서 비쌀 때 팜
#비싼 가격이 두번째, 세번째에 무조건 있어야됨.
#가격이 내림차순이면 0


T = int(input())

for tc in range(1, T+1):

    N = int(input())
    price = list(map(int, input().split()))
    dp = [0] * N

    # 최대 가격 마지막 날짜로 초기화
    max_price = price[-1]

    # 끝에서 두번째 부터 거꾸로 반복
    for i in range(N-2, -1, -1):

        # 최대 가격이 해당 가격보다 크면,
        # 즉, 미래 가격이 더 비싸므로, 해당 차액을 dp에 저장
        if max_price > price[i]:
            dp[i+1] = max_price - price[i]
        # 미래의 최대 가격 보다 이전 가격이 더 비싸므로 해당 최대가격 갱신
        else:
            max_price = price[i]
    # 미래의 가격이 과거보다 비싸서, 최대 차액거래가 되는 모든 경우가 dp 리스트에 저장된다.
    print(f"#{tc}", sum(dp))