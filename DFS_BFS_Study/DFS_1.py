'''
음료수 얼려 먹기 (연결 요소 찾기 문제)

N*M 얼음 틀 있음. 구멍 뚫린 부분 0, 칸막이 있는 부분 1표시.
상하좌우 연결된 것으로 간주.
얼음 틀 모양이 입력조건 주어졌을 때, 생성되는 총 아이스크림 개수 구하는 프로그램 작성

ex)
4 5
00110
00011
11111
00000     -> 3개의 아이스크림 생성됨. -> 3 출력.
'''
# 얼음을 얼릴 수 있는 공간이 상, 하, 좌, 우 연결 -> 그래프 형태 모델링 -> DFS/BFS로 풀 수 있음.
# 서로 연결되어 있는 노드의 연결 요소의 개수를 구하기.
# 시작 노드에 연결된 모든 노드들을 방문하면서 방문 처리를 한다.
# 1로 되어있는 부분은 이동 불가 처리 -> 자연스럽게 0으로 연결된 노드만 방문처리 된다.

#DFS 풀이법 (모든 위치에 대해, 현재 인접한 노드에 대해서도 재귀 호출해서 연결된 모든 노드들을 방문한다.)
'''
1. 특정 지점의 주변 상하좌우 살펴본 뒤에 주변 지점 중 값이 0이면서, 아직 방문하지 않은 지점이 있다면 해당 지점 방문
2. 방문한 지점에서 다시 상하좌우 살펴보면서 방문을 진행. 반복하면 연결된 모든 지점을 방문 가능
3. 모든 노드들에 대해 1~2 반복. 방문하지 않은 지점의 수를 카운트 

'''
#dfs 함수 정의_ 특정 노드들을 방문하고 연결된 모든 노드들 방문
def dfs(x,y):
    #주어진 범위를 벗어나는 경우에는 즉시 종료 (재귀함수 종료조건)
    if x <= -1 or x >= N or y <= -1 or y >= M:
        return False

    #현재 노드를 아직 방문하지 않았다면
    if graph[x][y] == 0:
        #해당 노드 방문 처리
        graph[x][y] = 1
        #상하좌우 위치들 모두 재귀적으로 호출 -> 리턴값 받지 않으므로 단순 연결된 모든 노드들을 방문하기 위한 목적
        dfs(x-1,y) #상
        dfs(x,y-1) #좌
        dfs(x+1,y) #하
        dfs(x,y+1) #우
        return True #현재 처음 위치에 대해 모든 dfs를 수행했으므로 True 리턴
    return False

N, M = map(int, input().split())
graph = [list(map(int, input())) for _ in range(N)]

#모든 노드(위치)에 대해 음료수를 채움
answer = 0
for i in range(N):
    for j in range(M):
        #해당 현재 위치에 대해 DFS를 수행
        if dfs(i, j) == True: #0으로 연결된 부분이 모두 탐색되었다면, 결과값 카운트
            answer += 1
print(answer)